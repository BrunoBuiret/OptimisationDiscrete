package views;

import algorithms.AlgorithmListenerInterface;
import algorithms.SimulatedAnnealing;
import java.io.File;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import models.Agency;
import models.TrainingCenter;
import utils.CsvUtils;

/**
 * @author Bruno Buiret (bruno.buiret@etu.univ-lyon1.fr)
 * @author Thomas Arnaud (thomas.arnaud@etu.univ-lyon1.fr)
 * @author Alexis Rabilloud (alexis.rabilloud@etu.univ-lyon1.fr)
 */
public class SimulationWindow extends javax.swing.JFrame
{
    /**
     * Launches the simulation window.
     *
     * @param args The command line arguments.
     */
    public static void main(String args[])
    {
        /* Set the look and feel */
        try
        {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch(ClassNotFoundException|InstantiationException|IllegalAccessException|javax.swing.UnsupportedLookAndFeelException e)
        {
            java.util.logging.Logger.getLogger(SimulationWindow.class.getName()).log(java.util.logging.Level.SEVERE, e.getMessage(), e);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new SimulationWindow().setVisible(true);
        });
    }

    /**
     * Creates new form SimulationWindow
     */
    public SimulationWindow()
    {
        // Initialize properties
        this.executor = Executors.newFixedThreadPool(1);

        // Initialize window
        this.initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        trainersFeeLabel = new javax.swing.JLabel();
        trainingCentersFeeLabel = new javax.swing.JLabel();
        agenciesLabel = new javax.swing.JLabel();
        trainingCentersLabel = new javax.swing.JLabel();
        agenciesPanel = new javax.swing.JPanel();
        agenciesField = new javax.swing.JTextField();
        agenciesBrowseButton = new javax.swing.JButton();
        trainingCentersPanel = new javax.swing.JPanel();
        trainingCentersField = new javax.swing.JTextField();
        trainingCentersBrowseButton = new javax.swing.JButton();
        trainersFeeField = new javax.swing.JSpinner();
        trainingCentersFeeField = new javax.swing.JSpinner();
        pricePerKilometerLabel = new javax.swing.JLabel();
        pricePerKilometerField = new javax.swing.JSpinner();
        algorithmsTabs = new javax.swing.JTabbedPane();
        simulatedAnnealingTab = new javax.swing.JPanel();
        iterationsNumberLabel = new javax.swing.JLabel();
        neighborsChoicesNumberLabel = new javax.swing.JLabel();
        initialTemperatureLabel = new javax.swing.JLabel();
        iterationsNumberField = new javax.swing.JSpinner();
        neighborsChoicesNumberField = new javax.swing.JSpinner();
        initialTemperatureField = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        simulatedAnnealingProgressBar = new javax.swing.JProgressBar();
        simulatedAnnealingLaunchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        simulatedAnnealingLog = new javax.swing.JTextPane();
        temperatureModifierLabel = new javax.swing.JLabel();
        temperatureModifierField = new javax.swing.JSpinner();
        trainingCenterCapacityLabel = new javax.swing.JLabel();
        trainingCenterCapacityField = new javax.swing.JSpinner();
        mapView = new views.MapComponent();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulation - Projet - Lieux de formation");
        setMinimumSize(new java.awt.Dimension(750, 400));
        setPreferredSize(new java.awt.Dimension(750, 400));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        trainersFeeLabel.setText("Coût des formateurs (€)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        getContentPane().add(trainersFeeLabel, gridBagConstraints);

        trainingCentersFeeLabel.setText("Coût d'un centre de formation (€)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(trainingCentersFeeLabel, gridBagConstraints);

        agenciesLabel.setText("Liste des agences");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(agenciesLabel, gridBagConstraints);

        trainingCentersLabel.setText("Liste des centres de formation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(trainingCentersLabel, gridBagConstraints);

        agenciesPanel.setLayout(new java.awt.GridBagLayout());

        agenciesField.setText("D:\\ListeAgences_100.txt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        agenciesPanel.add(agenciesField, gridBagConstraints);

        agenciesBrowseButton.setText("Parcourir");
        agenciesBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agenciesBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        agenciesPanel.add(agenciesBrowseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        getContentPane().add(agenciesPanel, gridBagConstraints);

        trainingCentersPanel.setLayout(new java.awt.GridBagLayout());

        trainingCentersField.setText("D:\\LieuxPossibles.txt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        trainingCentersPanel.add(trainingCentersField, gridBagConstraints);

        trainingCentersBrowseButton.setText("Parcourir");
        trainingCentersBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trainingCentersBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        trainingCentersPanel.add(trainingCentersBrowseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        getContentPane().add(trainingCentersPanel, gridBagConstraints);

        trainersFeeField.setModel(new javax.swing.SpinnerNumberModel(2000.0d, 0.0d, null, 1.0d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(trainersFeeField, gridBagConstraints);

        trainingCentersFeeField.setModel(new javax.swing.SpinnerNumberModel(1000.0d, 0.0d, null, 1.0d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(trainingCentersFeeField, gridBagConstraints);

        pricePerKilometerLabel.setText("Coût de transport par kilomètre (€)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(pricePerKilometerLabel, gridBagConstraints);

        pricePerKilometerField.setModel(new javax.swing.SpinnerNumberModel(0.4d, 0.0d, null, 0.1d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(pricePerKilometerField, gridBagConstraints);

        java.awt.GridBagLayout simulatedAnnealingTabLayout = new java.awt.GridBagLayout();
        simulatedAnnealingTabLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        simulatedAnnealingTabLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0};
        simulatedAnnealingTab.setLayout(simulatedAnnealingTabLayout);

        iterationsNumberLabel.setText("Nombre d'itérations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        simulatedAnnealingTab.add(iterationsNumberLabel, gridBagConstraints);

        neighborsChoicesNumberLabel.setText("Nombre de choix de voisins");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        simulatedAnnealingTab.add(neighborsChoicesNumberLabel, gridBagConstraints);

        initialTemperatureLabel.setText("Température initiale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        simulatedAnnealingTab.add(initialTemperatureLabel, gridBagConstraints);

        iterationsNumberField.setModel(new javax.swing.SpinnerNumberModel(100, 0, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        simulatedAnnealingTab.add(iterationsNumberField, gridBagConstraints);

        neighborsChoicesNumberField.setModel(new javax.swing.SpinnerNumberModel(10, 0, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        simulatedAnnealingTab.add(neighborsChoicesNumberField, gridBagConstraints);

        initialTemperatureField.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.1d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        simulatedAnnealingTab.add(initialTemperatureField, gridBagConstraints);

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0, 5, 0};
        jPanel2Layout.rowHeights = new int[] {0};
        jPanel2.setLayout(jPanel2Layout);

        simulatedAnnealingProgressBar.setMaximum(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(simulatedAnnealingProgressBar, gridBagConstraints);

        simulatedAnnealingLaunchButton.setText("Lancer la simulation");
        simulatedAnnealingLaunchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                simulatedAnnealingLaunchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(simulatedAnnealingLaunchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        simulatedAnnealingTab.add(jPanel2, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(23, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(8, 100));

        simulatedAnnealingLog.setEditable(false);
        jScrollPane2.setViewportView(simulatedAnnealingLog);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        simulatedAnnealingTab.add(jScrollPane2, gridBagConstraints);

        temperatureModifierLabel.setText("Modificateur de température");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        simulatedAnnealingTab.add(temperatureModifierLabel, gridBagConstraints);

        temperatureModifierField.setModel(new javax.swing.SpinnerNumberModel(0.99d, 0.0d, 1.0d, 0.1d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        simulatedAnnealingTab.add(temperatureModifierField, gridBagConstraints);

        algorithmsTabs.addTab("Recuit simulé", simulatedAnnealingTab);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 3);
        getContentPane().add(algorithmsTabs, gridBagConstraints);

        trainingCenterCapacityLabel.setText("Capacité d'un centre de formation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(trainingCenterCapacityLabel, gridBagConstraints);

        trainingCenterCapacityField.setModel(new javax.swing.SpinnerNumberModel(60, 0, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        getContentPane().add(trainingCenterCapacityField, gridBagConstraints);

        mapView.setMaximumSize(new java.awt.Dimension(750, 690));
        mapView.setMinimumSize(new java.awt.Dimension(750, 690));
        mapView.setPreferredSize(new java.awt.Dimension(750, 690));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        getContentPane().add(mapView, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Called when the user clicks on the "Browse" button for the agencies file.
     *
     * @param evt The action event.
     */
    private void agenciesBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agenciesBrowseButtonActionPerformed
    {//GEN-HEADEREND:event_agenciesBrowseButtonActionPerformed
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle("Emplacement de la liste des agences");
        fileDialog.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fileDialog.setApproveButtonText("Sélectionner");

        if(fileDialog.showDialog(this, null) == JFileChooser.APPROVE_OPTION)
        {
            this.agenciesField.setText(fileDialog.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_agenciesBrowseButtonActionPerformed

    /**
     * Called when the user clicks on the "Browse" button for the training centers file.
     *
     * @param evt The action event.
     */
    private void trainingCentersBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trainingCentersBrowseButtonActionPerformed
    {//GEN-HEADEREND:event_trainingCentersBrowseButtonActionPerformed
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle("Emplacement de la liste des centres de formation");
        fileDialog.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fileDialog.setApproveButtonText("Sélectionner");

        if(fileDialog.showDialog(this, null) == JFileChooser.APPROVE_OPTION)
        {
            this.trainingCentersField.setText(fileDialog.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_trainingCentersBrowseButtonActionPerformed

    /**
     * Called when the user launches the simulated annealing simulation.
     *
     * @param evt The action event.
     */
    private void simulatedAnnealingLaunchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_simulatedAnnealingLaunchButtonActionPerformed
    {//GEN-HEADEREND:event_simulatedAnnealingLaunchButtonActionPerformed
        this.executor.execute(() ->
        {
            // Disable everything
            this.trainersFeeField.setEnabled(false);
            this.trainingCentersFeeField.setEnabled(false);
            this.pricePerKilometerField.setEnabled(false);
            this.agenciesField.setEnabled(false);
            this.agenciesBrowseButton.setEnabled(false);
            this.trainingCentersField.setEnabled(false);
            this.trainingCentersBrowseButton.setEnabled(false);
            this.trainingCenterCapacityField.setEnabled(false);
            this.iterationsNumberField.setEnabled(false);
            this.neighborsChoicesNumberField.setEnabled(false);
            this.initialTemperatureField.setEnabled(false);
            this.temperatureModifierField.setEnabled(false);
            this.simulatedAnnealingLaunchButton.setEnabled(false);

            // Clear log history
            this.simulatedAnnealingLog.setText(null);

            // Fetch every fields' value
            double trainersFee = (double) this.trainersFeeField.getValue();
            double trainingCentersFee = (double) this.trainingCentersFeeField.getValue();
            double pricePerKilometer = (double) this.pricePerKilometerField.getValue();
            File agenciesFile = new File(this.agenciesField.getText());
            File trainingCentersFile = new File(this.trainingCentersField.getText());
            int trainingCenterCapacity = (int) this.trainingCenterCapacityField.getValue();
            int iterationsNumber = (int) this.iterationsNumberField.getValue();
            int neighborsChoicesNumber = (int) this.neighborsChoicesNumberField.getValue();
            double initialTemperature = (double) this.initialTemperatureField.getValue();

            // Check parameters are valid
            List<String> errors = new ArrayList<>();

            if(trainersFee < 0)
            {
                errors.add("Le coût des formateurs ne peut pas être négatif.");
            }

            if(trainingCentersFee < 0)
            {
                errors.add("Le coût d'un centre de formation ne peut pas être négatif.");
            }

            if(pricePerKilometer < 0)
            {
                errors.add("Le coût de transport par kilomètre ne peut pas être négatif.");
            }

            if(!this.agenciesField.getText().isEmpty())
            {
                if(agenciesFile.exists())
                {
                    if(agenciesFile.isFile())
                    {
                        if(!agenciesFile.canRead())
                        {
                            errors.add(String.format("La liste des agences \"%s\" n'est pas lisible.",
                                agenciesFile.getAbsolutePath()
                            ));
                        }
                    }
                    else
                    {
                        errors.add(String.format("La liste des agences \"%s\" n'est pas un fichier.",
                            agenciesFile.getAbsolutePath()
                        ));
                    }
                }
                else
                {
                    errors.add(String.format(
                        "La liste des agences \"%s\" n'existe pas.",
                        this.agenciesField.getText()
                    ));
                }
            }
            else
            {
                errors.add("Vous devez spécifier l'emplacement de la liste des agences.");
            }

            if(!this.trainingCentersField.getText().isEmpty())
            {
                if(trainingCentersFile.exists())
                {
                    if(trainingCentersFile.isFile())
                    {
                        if(!trainingCentersFile.canRead())
                        {
                            errors.add(String.format("La liste des centres de formation \"%s\" n'est pas lisible.",
                                trainingCentersFile.getAbsolutePath()
                            ));
                        }
                    }
                    else
                    {
                        errors.add(String.format("La liste des centres de formation \"%s\" n'est pas un fichier.",
                            trainingCentersFile.getAbsolutePath()
                        ));
                    }
                }
                else
                {
                    errors.add(String.format(
                        "La liste des centres de formation \"%s\" n'existe pas.",
                        this.trainingCentersField.getText()
                    ));
                }
            }
            else
            {
                errors.add("Vous devez spécifier l'emplacement de la liste des centres de formation.");
            }

            if(trainingCenterCapacity < 0)
            {
                errors.add("Le capacité d'un centre de formation ne peut pas être négative.");
            }

            if(iterationsNumber < 0)
            {
                errors.add("Le nombre d'itérations ne peut pas être négatif.");
            }

            if(neighborsChoicesNumber <= 0)
            {
                errors.add("Le nombre de choix de voisins ne peut pas être négatif ou nul.");
            }

            if(0 > initialTemperature || 1 <= initialTemperature)
            {
                errors.add("La température doit appartenir à l'intervalle ]0 ; 1[.");
            }

            if(errors.isEmpty())
            {
                // Build the lists of agencies and training centers
                List<Agency> agencies = new ArrayList<>();
                List<TrainingCenter> trainingCenters = new ArrayList<>();
                List<String[]> agenciesLines = CsvUtils.read(agenciesFile, true), trainingCentersLines = CsvUtils.read(trainingCentersFile, true);

                for(String[] agencyLine : agenciesLines)
                {
                    agencies.add(new Agency(
                        agencyLine[0],
                        agencyLine[1],
                        agencyLine[2],
                        Double.parseDouble(agencyLine[4]),
                        Double.parseDouble(agencyLine[3]),
                        Integer.parseInt(agencyLine[5])
                    ));
                }

                for(String[] trainingCenterLine : trainingCentersLines)
                {
                    trainingCenters.add(new TrainingCenter(
                        trainingCenterLine[0],
                        trainingCenterLine[1],
                        trainingCenterLine[2],
                        Double.parseDouble(trainingCenterLine[4]),
                        Double.parseDouble(trainingCenterLine[3]),
                        trainingCenterCapacity
                    ));
                }
                
                this.mapView.setAgencies(agencies);
                this.mapView.setTrainingCenters(trainingCenters);

                // Create the algorithm
                SimulatedAnnealing algorithm = new SimulatedAnnealing(
                    trainingCenterCapacity,
                    trainersFee,
                    trainingCentersFee,
                    pricePerKilometer,
                    agencies,
                    trainingCenters,
                    iterationsNumber,
                    neighborsChoicesNumber,
                    initialTemperature,
                    trainersFee
                );

                // Set up listener
                JProgressBar progressBar = this.simulatedAnnealingProgressBar;
                progressBar.setMinimum(0);
                progressBar.setValue(0);
                progressBar.setMaximum(iterationsNumber);
                
                Document logDocument = this.simulatedAnnealingLog.getDocument();
                NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("fr", "FR"));

                algorithm.addObserver(this.mapView);
                algorithm.addObserver(new AlgorithmListenerInterface()
                {
                    @Override
                    public void onStepEnd(Map<Agency, TrainingCenter> solution, double price)
                    {
                        // Update the progress bar's value
                        progressBar.setValue(progressBar.getValue() + 1);
                            
                        // Append a line to the log
                        try
                        {
                            logDocument.insertString(
                                logDocument.getLength(),
                                String.format(
                                    "- Une solution avec un prix de %s a été trouvée.\n",
                                    currencyFormatter.format(price)
                                ),
                                null
                            );
                        }
                        catch(BadLocationException ex)
                        {
                            Logger.getLogger(SimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    @Override
                    public void onEnd(Map<Agency, TrainingCenter> bestSolution, double bestPrice)
                    {
                        // Append a line to the log
                        try
                        {
                            logDocument.insertString(
                                logDocument.getLength(),
                                String.format(
                                    "-> La meilleure solution a un prix de %s.\n",
                                    currencyFormatter.format(bestPrice)
                                ),
                               null
                            );
                        }
                        catch(BadLocationException ex)
                        {
                            Logger.getLogger(SimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });

                // Launch algorithm
                algorithm.run();
            }
            else
            {
                StringBuilder errorsBuilder = new StringBuilder();

                errors.stream().forEach((error) ->
                {
                    errorsBuilder.append(String.format(
                        "- %s\n",
                        error
                    ));
                });

                this.simulatedAnnealingLog.setText(errorsBuilder.toString());
            }


            // Enable everything
            this.trainersFeeField.setEnabled(true);
            this.trainingCentersFeeField.setEnabled(true);
            this.pricePerKilometerField.setEnabled(true);
            this.agenciesField.setEnabled(true);
            this.agenciesBrowseButton.setEnabled(true);
            this.trainingCentersField.setEnabled(true);
            this.trainingCentersBrowseButton.setEnabled(true);
            this.trainingCenterCapacityField.setEnabled(true);
            this.iterationsNumberField.setEnabled(true);
            this.neighborsChoicesNumberField.setEnabled(true);
            this.initialTemperatureField.setEnabled(true);
            this.temperatureModifierField.setEnabled(true);
            this.simulatedAnnealingLaunchButton.setEnabled(true);
        });
    }//GEN-LAST:event_simulatedAnnealingLaunchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agenciesBrowseButton;
    private javax.swing.JTextField agenciesField;
    private javax.swing.JLabel agenciesLabel;
    private javax.swing.JPanel agenciesPanel;
    private javax.swing.JTabbedPane algorithmsTabs;
    private javax.swing.JSpinner initialTemperatureField;
    private javax.swing.JLabel initialTemperatureLabel;
    private javax.swing.JSpinner iterationsNumberField;
    private javax.swing.JLabel iterationsNumberLabel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private views.MapComponent mapView;
    private javax.swing.JSpinner neighborsChoicesNumberField;
    private javax.swing.JLabel neighborsChoicesNumberLabel;
    private javax.swing.JSpinner pricePerKilometerField;
    private javax.swing.JLabel pricePerKilometerLabel;
    private javax.swing.JButton simulatedAnnealingLaunchButton;
    private javax.swing.JTextPane simulatedAnnealingLog;
    private javax.swing.JProgressBar simulatedAnnealingProgressBar;
    private javax.swing.JPanel simulatedAnnealingTab;
    private javax.swing.JSpinner temperatureModifierField;
    private javax.swing.JLabel temperatureModifierLabel;
    private javax.swing.JSpinner trainersFeeField;
    private javax.swing.JLabel trainersFeeLabel;
    private javax.swing.JSpinner trainingCenterCapacityField;
    private javax.swing.JLabel trainingCenterCapacityLabel;
    private javax.swing.JButton trainingCentersBrowseButton;
    private javax.swing.JSpinner trainingCentersFeeField;
    private javax.swing.JLabel trainingCentersFeeLabel;
    private javax.swing.JTextField trainingCentersField;
    private javax.swing.JLabel trainingCentersLabel;
    private javax.swing.JPanel trainingCentersPanel;
    // End of variables declaration//GEN-END:variables
    private final ExecutorService executor;
}
